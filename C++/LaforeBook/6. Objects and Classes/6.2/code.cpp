/* *2. Представьте пункт для взимания платежей за проезд по автостраде. Каждая проезжающая машина должна заплатить за проезд 50 центов, однако часть машин платит за проезд, а часть проезжает бесплатно. В кассе ведется учет числа проехавших машин и суммарная выручка от платы за проезд. Создайте модель такой кассы с помощью класса tollBooth. Класс должен содержать два поля. Одно из них, типа unsigned int, предназначено для учета количества проехавших автомобилей, а второе, имеющее тип double, будет содержать суммарную выручку от оплаты проезда. Конструктор должен инициализировать оба поля нулевыми значениями. Метод payingCar() инкрементирует число машин и увеличивает на 0.50 суммарную выручку. Другой метод, nopayCar(), увеличивает на единицу число автомобилей, но оставляет без изменения выручку. Метод display() выводит оба значения на экран. Там, где это возможно, сделайте методы константными. Создайте программу, которая продемонстрирует работу класса. Программа должна предложить пользователю нажать одну клавишу для того, чтобы сымитировать заплатившего автолюбителя, и другую клавишу, чтобы сымитировать недобросовестного водителя. Нажатие клавиши Esc должно привести к выдаче текущих значений количества машин и выручки и завершению программы.*/
#include <iostream>
#include <conio.h>
using namespace std;
class tollBooth
{
	unsigned int CarsCount;
	double revenue;	
	public:
	tollBooth():CarsCount(0),revenue(0.0){}
	void payingCar()
	{
		CarsCount++;
		revenue+=0.50;
	}
	void nopayCar()
	{
		CarsCount++;
	}
	void display()const
	{
		cout<<"Cars count = "<<CarsCount<<"; revenue = "<<revenue;
	}
};
int main(void)
{
	tollBooth tb;
	char ch;
	do
	{
		cout<<"Press 1 to pay for passage, 0 not to do it end Esc to exit: ";
		ch=getche();
		while(ch!='0' && ch!='1' && ch!=27)
		{
			cout<<"\nIncorrect choise! Try again: ";
			ch=getche();
		}
		cout<<endl;
		if(ch=='1')
			tb.payingCar();
		else
			if(ch=='0')
				tb.nopayCar();
	}while(ch!=27);
	tb.display();
	return 0;
}
