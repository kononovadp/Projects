#pragma once
#include <stdio.h>
#include <stdlib.h>
#include <iostream> 
#define _CRT_SECURE_NO_WARNINGS
#define HEAP_SIZE 10
using namespace std;
typedef enum{ FREE, ALLOCATED };
typedef struct memorycard
{
	int id;
	int size;
	string status;
	memorycard* next;	
} mem_chunk;

typedef struct {
	int last_id_used;
	 mem_chunk *first;//pointer to the first memory block
}mem_dispatcher;


void init(mem_dispatcher *md)
{
memorycard *A;
A=new memorycard;
A->id=0;
A->size=100;
A->status="FREE"; A->next=NULL;
md->first=A;
md->last_id_used=0;
}

int allocate(mem_dispatcher *md, int size)
{
 int min=100;
  mem_chunk *q;
  mem_chunk *p;
    p=NULL;
    q=md->first;
  //poisk potrib bloku 
	do { 
    if ((q->size>=size)&&(q->status=="FREE")&&( q->size<=min ) )
       {	p=q;  min=q->size;}
          q=q->next;
      }
  while (q!=NULL);


  if (p==NULL) return(-1);// anee ia iaoee ianoa
  else
  {
    if (p->size==size)       //anee iaoee oi?ii ii ?acia?o, iaiyai oieuei noaoon
		{p->status=ALLOCATED; return p->id;}
     else                   // anee naiaiaiue aeie aieuoa iaiaoiaeiiai
      {md->last_id_used++;
	 
		  p->size=p->size-size;//oiaiuoaaony ?acia? naiaiaiiai aeiea
          mem_chunk *n; n=new mem_chunk; // nicaaai iiaue aey caiene
          n->next=p->next;
         p->next=n;
         n->size=size;
         n->id=md->last_id_used; 
       }
	  return md->last_id_used;
   }
//end allocate
}


int deallocate(mem_dispatcher *md, int block_id)
{//dealocation
 mem_chunk *t,*pred;

 if (md->first->id==block_id) //anee io?ii i?enoeou ia?aue
	      md->first->status=FREE;
 
else   
{	pred=md->first; t=md->first->next;
   while (t!=NULL)
	{  if (t->id==block_id) // iaoee io?iue aeie
	      {t->status="FREE"; // inaiai?aaai aai
              if (pred->status=="FREE") //anee ii?ii iauaaeieou n i?aauaouei
		     { pred->size=pred->size+t->size;
		      pred->next=t->next;
		      t=pred;	   
		     }
		   if (t->next!=NULL)	 //anee aaeuoa anou yeaiaio 
		      if (t->next->status=="FREE")  // e ii naiaiaai,  - iauaaeiyai
		     { t->size=  t->size  +  t->next->size;
		       t->next= (t->next) -> next;
		     }	 
			 
          	break; 
		  }
	  pred=t;
	  t=t->next;
	}
}/// end dealocation
};


void defragment(mem_dispatcher *md)
{ mem_chunk *t,*pred;
 pred=md->first; t=md->first->next;
  while (t!=NULL)
	{  if (t->status=="FREE")
            { md->first->size= md->first->size  +  t->size;
		      pred->next=t->next;
		   	}			
	       else pred=t;
		   
		t=t->next;
	}
};

	void show_memory_map(mem_dispatcher *md)
{
	memorycard *t;
    t=md->first;
while(t!=NULL){
	cout<<"id:"<<t->id<<"  size:"<<t->size<<"   status:"<<t->status<<endl;
	t=t->next;
	 }
cout<<"___________________________________________"<<endl;
  /*while(start) {
    cout<<start->memorycard.id<<"  ";
    start = start->next;
  }*/
}

int main()
{
 mem_dispatcher *md;
    md=new mem_dispatcher;
	init(md);
	// menu!!!
	show_memory_map(md);
	allocate(md, 10);
	allocate(md,30);
	allocate(md, 20);
	show_memory_map(md);
	deallocate(md, 2);
	show_memory_map(md);
	allocate(md, 20);show_memory_map(md);
	deallocate(md, 1);
	show_memory_map(md);
	defragment(md);
	show_memory_map(md);
	
cin.get();	}