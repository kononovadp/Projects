/* queue.h -- интерфейс очереди */
#ifndef _QUEUE_H_
#define _QUEUE_H_
#include <stdbool.h>

/* ЗДЕСЬ НЕОБХОДИМО ВСТАВИТЬ ОПРЕДЕЛЕНИЕ ТИПА ITEM */
/* НАПРИМЕР, */
//typedef int Item;  // для use_q.c
/* ИЛИ typedef struct item {int gumption; int charisma;} Item; */
typedef struct item
{
	long arrive;
	int processtime;
}Item;
#define MAXQUEUE 10

typedef struct node
{
    Item item;
    struct node * next;
} Node;

typedef struct queue
{
    Node * front;  /* указатель на начало очереди    */
    Node * rear;   /* указатель на конец очереди     */
    int items;     /* количество элементов в очереди */
	Item temp;                // данные о новом клиенте
    long line_wait;// = 0;       // накопительное значение времени в очереди	
	long customers;// = 0;       // количество клиентов присоединившихся к очереди
    long served;// = 0;   // количество клиентов, обслуженных за время моделирования
    long sum_line;// = 0;        // накопительное значение длины очереди
	long turnaways; // количество отказов из-за переполненной очереди
} Queue;


/* операция:     инициализация очереди                      */
/* предусловие:  pq указывает на очередь                    */
/* постусловие:  очередь инициализирована пустым содержимым */
void InitializeQueue(Queue * pq);

/* операция:     проверка, полна ли очередь                                      */
/* предусловие:  pq указывает на ранее инициализированную очередь                */
/* постусловие:  возвращает True, если очередь полна, и False в противном случае */
bool QueueIsFull(const Queue * pq);

/* операция:     проверка, пуста ли очередь                                      */
/* предусловие:  pq указывает на ранее инициализированную очередь                */
/* постусловие:  возвращает True, если очередь пуста, и False в противном случае */
bool QueueIsEmpty(const Queue *pq);

/* операция:     определение количества элементов в очереди       */
/* предусловие:  pq указывает на ранее инициализированную очередь */
/* постусловие:  возвращает количество элементов в очереди        */
int QueueItemCount(const Queue * pq);

/* операция:     добавление элемента в конец очереди              */
/* предусловие:  pq указывает на ранее инициализированную очередь */
/*               элемент должен быть помещен в конец очереди      */
/* постусловие:  если очередь не пуста, элемент помещается        */
/*               в конец очереди и функция возвращает True;       */
/*               в противном случае очередь остается неизменной,  */
/*               а функция возвращает False                       */
bool EnQueue(Item item, Queue * pq);

/* операция:     удаление элемента из начала очереди              */
/* предусловие:  pq указывает на ранее инициализированную очередь */
/* постусловие:  если очередь не пуста, элемент в начале очереди  */
/*               копируется в *pitem и удаляется из очереди,      */
/*               и функция возвращает True;                       */
/*               если операция опустошает очередь, очередь        */
/*               переустанавливается в пустое состояние.          */
/*               Если очередь пуста с самого начала, она остается */
/*               неизменной, и функция возвращает False           */
bool DeQueue(Item *pitem, Queue * pq);

/* операция:     опустошение очереди                              */
/* предусловие:  pq указывает на ранее инициализированную очередь */
/* постусловие:  очередь пуста                                    */
void EmptyTheQueue(Queue * pq);

#endif

