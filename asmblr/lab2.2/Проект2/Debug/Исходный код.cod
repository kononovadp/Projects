; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\Users\Maximka\Desktop\Проект2\Проект2\Исходный код.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?k@@3HA						; k
_BSS	SEGMENT
?k@@3HA	DD	01H DUP (?)				; k
_BSS	ENDS
PUBLIC	_main
PUBLIC	??_C@_03JDANDILB@?$CFd?5?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	__imp__getchar:PROC
EXTRN	__imp__printf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDANDILB@?$CFd?5?$AA@
CONST	SEGMENT
??_C@_03JDANDILB@?$CFd?5?$AA@ DB '%d ', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\maximka\desktop\проект2\проект2\исходный код.cpp
;	COMDAT _main
_TEXT	SEGMENT
_j$ = -57						; size = 1
_A$ = -48						; size = 40
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 3    : int main(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00012	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4    : 	int A[10];
; 5    : 	char j;
; 6    : 	k = 3;

  00028	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?k@@3HA, 3	; k

; 7    : 	j = 0;

  00032	c6 45 c7 00	 mov	 BYTE PTR _j$[ebp], 0
$LN5@main:

; 8    : 	while (j < 10){

  00036	0f be 45 c7	 movsx	 eax, BYTE PTR _j$[ebp]
  0003a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0003d	7d 33		 jge	 SHORT $LN4@main

; 9    : 		_asm{
; 10   : 			//if (j != 7)
; 11   : 			movsx eax, j;

  0003f	0f be 45 c7	 movsx	 eax, BYTE PTR _j$[ebp]

; 12   : 			cmp eax, 7;

  00043	83 f8 07	 cmp	 eax, 7

; 13   : 			je ln4main;

  00046	74 0f		 je	 SHORT $ln4main$11

; 14   : 			//k += j
; 15   : 			movsx eax, j;

  00048	0f be 45 c7	 movsx	 eax, BYTE PTR _j$[ebp]

; 16   : 			add eax, k;

  0004c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?k@@3HA	; k

; 17   : 			mov k, eax;

  00052	a3 00 00 00 00	 mov	 DWORD PTR ?k@@3HA, eax	; k
$ln4main$11:

; 18   : 			LN4main:
; 19   : 			//A[j] = k;
; 20   : 			movsx eax,j

  00057	0f be 45 c7	 movsx	 eax, BYTE PTR _j$[ebp]

; 21   : 			mov ecx,k

  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?k@@3HA	; k

; 22   : 			mov A[eax * 4], ecx

  00061	89 8c 85 d0 ff
	ff ff		 mov	 DWORD PTR _A$[ebp+eax*4], ecx

; 23   : 			//j++;
; 24   : 			mov al,j

  00068	8a 45 c7	 mov	 al, BYTE PTR _j$[ebp]

; 25   : 			add al,1

  0006b	04 01		 add	 al, 1

; 26   : 			mov j,al	

  0006d	88 45 c7	 mov	 BYTE PTR _j$[ebp], al

; 27   : 			}
; 28   : 			}

  00070	eb c4		 jmp	 SHORT $LN5@main
$LN4@main:

; 29   : 	for (j = 0; j<10; j++)

  00072	c6 45 c7 00	 mov	 BYTE PTR _j$[ebp], 0
  00076	eb 08		 jmp	 SHORT $LN3@main
$LN2@main:
  00078	8a 45 c7	 mov	 al, BYTE PTR _j$[ebp]
  0007b	04 01		 add	 al, 1
  0007d	88 45 c7	 mov	 BYTE PTR _j$[ebp], al
$LN3@main:
  00080	0f be 45 c7	 movsx	 eax, BYTE PTR _j$[ebp]
  00084	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00087	7d 22		 jge	 SHORT $LN1@main

; 30   : 		printf("%d ", A[j]);

  00089	0f be 45 c7	 movsx	 eax, BYTE PTR _j$[ebp]
  0008d	8b f4		 mov	 esi, esp
  0008f	8b 4c 85 d0	 mov	 ecx, DWORD PTR _A$[ebp+eax*4]
  00093	51		 push	 ecx
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  0009f	83 c4 08	 add	 esp, 8
  000a2	3b f4		 cmp	 esi, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	eb cd		 jmp	 SHORT $LN2@main
$LN1@main:

; 31   : 		printf("\n");

  000ab	8b f4		 mov	 esi, esp
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  000b8	83 c4 04	 add	 esp, 4
  000bb	3b f4		 cmp	 esi, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 32   : 	getchar();

  000c2	8b f4		 mov	 esi, esp
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getchar
  000ca	3b f4		 cmp	 esi, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 33   : 	return 0;

  000d1	33 c0		 xor	 eax, eax

; 34   : }

  000d3	52		 push	 edx
  000d4	8b cd		 mov	 ecx, ebp
  000d6	50		 push	 eax
  000d7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@main
  000dd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e2	58		 pop	 eax
  000e3	5a		 pop	 edx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ea	33 cd		 xor	 ecx, ebp
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  000f7	3b ec		 cmp	 ebp, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
  00102	8b ff		 npad	 2
$LN10@main:
  00104	01 00 00 00	 DD	 1
  00108	00 00 00 00	 DD	 $LN9@main
$LN9@main:
  0010c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00110	28 00 00 00	 DD	 40			; 00000028H
  00114	00 00 00 00	 DD	 $LN8@main
$LN8@main:
  00118	41		 DB	 65			; 00000041H
  00119	00		 DB	 0
_main	ENDP
_TEXT	ENDS
END
