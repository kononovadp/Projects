; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\Users\Maximka\Desktop\Проект2\Проект2\Исходный код.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?k@@3HA						; k
_BSS	SEGMENT
?k@@3HA	DD	01H DUP (?)				; k
_BSS	ENDS
PUBLIC	_main
PUBLIC	??_C@_03JDANDILB@?$CFd?5?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	__imp__getchar:PROC
EXTRN	__imp__printf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDANDILB@?$CFd?5?$AA@
CONST	SEGMENT
??_C@_03JDANDILB@?$CFd?5?$AA@ DB '%d ', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\maximka\desktop\проект2\проект2\исходный код.cpp
;	COMDAT _main
_TEXT	SEGMENT
_j$ = -53						; size = 1
_A$ = -44						; size = 40
_main	PROC						; COMDAT

; 3    : int main(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 4    : 	int A[10];
; 5    : 	char j;
; 6    : 	k = 3;

  0001e	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?k@@3HA, 3	; k

; 7    : 	j = 0;

  00028	c6 45 cb 00	 mov	 BYTE PTR _j$[ebp], 0
$LN6@main:

; 8    : 	while (j<10){

  0002c	0f be 45 cb	 movsx	 eax, BYTE PTR _j$[ebp]
  00030	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00033	7d 30		 jge	 SHORT $LN5@main

; 9    : 		if (j != 7)

  00035	0f be 45 cb	 movsx	 eax, BYTE PTR _j$[ebp]
  00039	83 f8 07	 cmp	 eax, 7
  0003c	74 0f		 je	 SHORT $LN4@main

; 10   : 			k += j;

  0003e	0f be 45 cb	 movsx	 eax, BYTE PTR _j$[ebp]
  00042	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?k@@3HA	; k
  00048	a3 00 00 00 00	 mov	 DWORD PTR ?k@@3HA, eax	; k
$LN4@main:

; 11   : 		A[j] = k;

  0004d	0f be 45 cb	 movsx	 eax, BYTE PTR _j$[ebp]
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?k@@3HA	; k
  00057	89 4c 85 d4	 mov	 DWORD PTR _A$[ebp+eax*4], ecx

; 12   : 		j++;

  0005b	8a 45 cb	 mov	 al, BYTE PTR _j$[ebp]
  0005e	04 01		 add	 al, 1
  00060	88 45 cb	 mov	 BYTE PTR _j$[ebp], al

; 13   : 	}

  00063	eb c7		 jmp	 SHORT $LN6@main
$LN5@main:

; 14   : 	for (j = 0; j<10; j++)

  00065	c6 45 cb 00	 mov	 BYTE PTR _j$[ebp], 0
  00069	eb 08		 jmp	 SHORT $LN3@main
$LN2@main:
  0006b	8a 45 cb	 mov	 al, BYTE PTR _j$[ebp]
  0006e	04 01		 add	 al, 1
  00070	88 45 cb	 mov	 BYTE PTR _j$[ebp], al
$LN3@main:
  00073	0f be 45 cb	 movsx	 eax, BYTE PTR _j$[ebp]
  00077	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0007a	7d 22		 jge	 SHORT $LN1@main

; 15   : 		printf("%d ", A[j]);

  0007c	0f be 45 cb	 movsx	 eax, BYTE PTR _j$[ebp]
  00080	8b f4		 mov	 esi, esp
  00082	8b 4c 85 d4	 mov	 ecx, DWORD PTR _A$[ebp+eax*4]
  00086	51		 push	 ecx
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00092	83 c4 08	 add	 esp, 8
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	eb cd		 jmp	 SHORT $LN2@main
$LN1@main:

; 16   : 	printf("\n");

  0009e	8b f4		 mov	 esi, esp
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  000ab	83 c4 04	 add	 esp, 4
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 17   : 	getchar();

  000b5	8b f4		 mov	 esi, esp
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getchar
  000bd	3b f4		 cmp	 esi, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 18   : 	return 0;

  000c4	33 c0		 xor	 eax, eax

; 19   : }

  000c6	52		 push	 edx
  000c7	8b cd		 mov	 ecx, ebp
  000c9	50		 push	 eax
  000ca	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@main
  000d0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d5	58		 pop	 eax
  000d6	5a		 pop	 edx
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000e0	3b ec		 cmp	 ebp, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
  000eb	90		 npad	 1
$LN11@main:
  000ec	01 00 00 00	 DD	 1
  000f0	00 00 00 00	 DD	 $LN10@main
$LN10@main:
  000f4	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000f8	28 00 00 00	 DD	 40			; 00000028H
  000fc	00 00 00 00	 DD	 $LN9@main
$LN9@main:
  00100	41		 DB	 65			; 00000041H
  00101	00		 DB	 0
_main	ENDP
_TEXT	ENDS
END
